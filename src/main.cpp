/*2025年度　新入生プログラミング体験*/
#include "Scratch.hpp" 
void MainTask(void *pvParameters) {
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /*はじめ(ここから下の行にコードを書くよ！！！)*/
  set_black(35);
  set_white(50);
  set_pgain(1.5);
  wait_centerbutton();
  auto_linefollowing();
  /*おわり*/
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  vTaskDelete(Main_Task);
}






















































































/*以下はバックグラウンド処理*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DisplayTask(void *pvParameters) {
  while (1) {
    display_reflect(); //カラーセンサー情報表示

    vTaskDelay(pdMS_TO_TICKS(1)); //delay(1)
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MelodyTask(void *pvParameters) {
  while (1) {
    run_melody(); //走行音

    vTaskDelay(pdMS_TO_TICKS(1)); //delay(1)
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ControlTask(void *pvParameters) {
  while (1) {
    getColor(); //カラーセンサー色情報取得
    check_centerbutton(); //センターボタンチェック

    vTaskDelay(pdMS_TO_TICKS(1)); //delay(1)
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

void setup() {
  Serial.begin(115200); //シリアル通信開始(115200bps)

  display.init(); //ディスプレイの初期化
  display.setFont(ArialMT_Plain_16); //フォント設定
  display.drawString(0,0,"program reset...");
  display.display(); //ディスプレイ反映

  if (!APDS.begin()) { //カラーセンサーの初期化
    Serial.println("カラーセンサーが初期化できませんでした.");
  }

  right_servo.attach(right_servo_pin, 500, 2400); //サーボモーターの初期化
  left_servo.attach(left_servo_pin, 500, 2400);  //サーボモーターの初期化
  right_servo.write(right_servo_set); //サーボモーターの初期停止値を設定
  left_servo.write(left_servo_set); //サーボモーターの初期停止値を設定

  pinMode(LED_PIN, OUTPUT); //LED用ピン
  digitalWrite(LED_PIN, LOW); //LEDを消灯

  pinMode(CENTER_BUTTON, INPUT_PULLUP); //センターボタン用ピン

  pinMode(BUZZER_PIN, OUTPUT); //圧電スピーカー用ピン
  ledcSetup(2, 12000, 8); //サンプリング周波数、解像度を設定
  ledcAttachPin(BUZZER_PIN, 2); //PWMチャンネル2に設定

  delay(1000); //初期化待機時間

  begin_melody(); //起動音

  xTaskCreatePinnedToCore(MainTask, "Main", 4096, NULL, 3, &Main_Task, 0);
  xTaskCreatePinnedToCore(DisplayTask, "Display", 4096, NULL, 3, &Display_Task, 0);
  xTaskCreatePinnedToCore(ControlTask, "Control", 4096, NULL, 3, &Control_Task, 1);
  xTaskCreatePinnedToCore(MelodyTask, "Melody", 4096, NULL, 3, &Melody_Task, 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {
  //freeRTOSの並列処理
}